require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe FollowersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Follower. As you add validations to Follower, be sure to
  # adjust the attributes here as well.
  let(:user) { FactoryBot.create(:user)}
  let(:user1) { FactoryBot.create(:user)}
  let(:ride) { FactoryBot.create(:ride, user: user)}
  let!(:follower) { FactoryBot.create(:follower, ride: ride, user: user1)}
  let(:valid_attributes) {
    FactoryBot.attributes_for_with_foreign_keys(:follower)
  }

  let(:invalid_attributes) {
    FactoryBot.attributes_for(:follower)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # FollowersController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  context 'logged in user ' do
    before do
      sign_in(user1)
    end
    describe "GET #new" do
      it "returns a success response" do
        get :new, params: {ride_id: ride.id}, session: valid_session
        expect(response).to be_successful
      end
    end
  
    describe "GET #edit" do
      it "returns a success response" do
        get :edit, params: {id: follower.to_param,ride_id: ride.id}, session: valid_session
        expect(response).to be_successful
      end
    end
  
    describe "POST #create" do
      context "with valid params" do
        it "creates a new Follower" do
          expect {
            post :create, params: {follower: valid_attributes,ride_id: ride.id}, session: valid_session
          }.to change(Follower, :count).by(1)
        end
  
        it "redirects to the created follower" do
          post :create, params: {follower: valid_attributes,ride_id: ride.id}, session: valid_session
          expect(response).to redirect_to(ride_path(id: ride.id))
        end
      end
  
      context "with invalid params" do
        it "returns a success response (i.e. to display the 'new' template)" do
          post :create, params: {follower: invalid_attributes, ride_id: ride.id}, session: valid_session
          expect(response).to redirect_to(new_ride_path)
        end
      end
    end
  
    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) {
          FactoryBot.attributes_for_with_foreign_keys(:follower)
        }
  
  
        it "redirects to the follower" do
          put :update, params: {id: follower.to_param, follower: valid_attributes, ride_id: ride.id}, session: valid_session
          expect(response).to redirect_to(ride_path(id: ride.id))
        end
      end
  
      context "with invalid params" do
        it "returns a success response (i.e. to display the 'edit' template)" do
          put :update, params: {id: follower.to_param, follower: invalid_attributes, ride_id: ride.id}, session: valid_session
          expect(response).to redirect_to(ride_path(id: ride.id))
        end
      end
    end
  
    describe "DELETE #destroy" do
      it "destroys the requested follower" do
        expect {
          delete :destroy, params: {id: follower.to_param, ride_id: ride.id}, session: valid_session
        }.to change(Follower, :count).by(-1)
      end
  
      it "redirects to the followers list" do
        
        delete :destroy, params: {id: follower.to_param, ride_id: ride.id}, session: valid_session
        expect(response).to redirect_to(ride_path(id: ride.id))
      end
    end
  end
end
